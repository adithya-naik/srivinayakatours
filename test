import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { motion, AnimatePresence } from "framer-motion";
import StickyMarquee from "../components/StickyMarquee";
import {
  Calendar,
  CheckCircle,
  MapPin,
  Users,
  Phone,
  Mail,
  Shield,
  FileText,
  Map,
  Info,
  Clock,
  Star,
  ChevronRight,
  ChevronLeft,
  Plus,
  Minus,
  User,
  CreditCard,
  Lock,
  Trash2,
  DollarSign,
  Heart,
  Award,
} from "lucide-react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { packages } from "../data/packages";

const BookingPage = () => {
  const { packageId } = useParams();
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const [packageData, setPackageData] = useState(null);
  const [selectedPlan, setSelectedPlan] = useState(0);
  const [userId, setUserId] = useState(null);
  const [formData, setFormData] = useState({
    date: "",
    guests: 1,
    contactName: "",
    contactEmail: "",
    contactPhone: "",
    travelers: [{ name: "", age: "", gender: "male", idType: "passport", idNumber: "" }],
    paymentMethod: "creditCard",
    cardNumber: "",
    cardName: "",
    cardExpiry: "",
    cardCVV: "",
    agreeTerms: false,
    specialRequirements: "",
  });

  // Get user ID from localStorage
// Get user ID from localStorage
useEffect(() => {
  // Get the current user from localStorage
  const currentUser = JSON.parse(localStorage.getItem("currentUser"));
  
  if (currentUser && currentUser.id) {
    setUserId(currentUser.id);
    
    // Pre-fill contact information based on user details if available
    setFormData(prevData => ({
      ...prevData,
      contactName: `${currentUser.firstName} ${currentUser.lastName}` || prevData.contactName,
      contactEmail: currentUser.email || prevData.contactEmail,
      contactPhone: currentUser.phone || prevData.contactPhone
    }));
  } else {
    // If no logged in user, redirect to login page or show message
    toast.error("Please log in to book a package");
    navigate("/booking/${packageId}");
  }
}, []);

  useEffect(() => {
    const selectedPackage = packages.find((pkg) => pkg.id === parseInt(packageId));
    if (selectedPackage) {
      setPackageData(selectedPackage);
    } else {
      toast.error("Package not found!");
    }
  }, [packageId]);

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({ ...formData, [name]: type === "checkbox" ? checked : value });
  };

  const handleTravelerChange = (index, field, value) => {
    const updatedTravelers = [...formData.travelers];
    updatedTravelers[index] = { ...updatedTravelers[index], [field]: value };
    setFormData({ ...formData, travelers: updatedTravelers });
  };

  const addTraveler = () => {
    setFormData({
      ...formData,
      travelers: [...formData.travelers, { name: "", age: "", gender: "male", idType: "passport", idNumber: "" }],
    });
    toast.info("New traveler added!");
  };

  const removeTraveler = (index) => {
    if (formData.travelers.length > 1) {
      const updatedTravelers = formData.travelers.filter((_, i) => i !== index);
      setFormData({ ...formData, travelers: updatedTravelers });
      toast.info("Traveler removed");
    } else {
      toast.warning("At least one traveler is required!");
    }
  };

  const nextStep = () => {
    if (step === 1 && !formData.date) {
      toast.error("Please select a travel date.");
      return;
    }
    if (step === 2 && formData.travelers.some((traveler) => !traveler.name || !traveler.age)) {
      toast.error("Please fill in all traveler details.");
      return;
    }
    setStep(step + 1);
    window.scrollTo(0, 0);
    toast.success(`Step ${step} completed!`);
  };

  const prevStep = () => {
    setStep(step - 1);
    window.scrollTo(0, 0);
  };

  const saveBookingToLocalStorage = (bookingData) => {
    // Get existing bookings or initialize empty array
    const existingBookings = JSON.parse(localStorage.getItem("id_bookings")) || [];
    const authUser = JSON.parse(localStorage.getItem("authState")) || [];
  
    // Create a new booking with a unique ID
    const newBooking = {
      id: authUser.id,  // Convert to string for consistency with user IDs
      userId: userId,
      packageId: packageId,
      bookingDate: new Date().toISOString(),
      status: "confirmed",
      ...bookingData
    };
    
    // Add the new booking to the array
    existingBookings.push(newBooking);
    
    // Save back to localStorage
    localStorage.setItem("id_bookings", JSON.stringify(existingBookings));
    
    return newBooking.id; // Return the booking ID for reference
  };



  const handleSubmit = (e) => {
    e.preventDefault();
  
    if (formData.paymentMethod === "creditCard") {
      if (!formData.cardNumber || !formData.cardName || !formData.cardExpiry || !formData.cardCVV) {
        toast.error("Please fill in all payment details.");
        return;
      }
    }
  
    if (!formData.agreeTerms) {
      toast.error("Please agree to the terms and conditions.");
      return;
    }
  
    // Get user information to include with booking
    const currentUser = JSON.parse(localStorage.getItem("currentUser"));
    if (!currentUser || !currentUser.id) {
      toast.error("You must be logged in to complete this booking");
      navigate("/login");
      return;
    }
  
    const bookingData = {
      packageName: packageData.name,
      packageLocation: packageData.location,
      packageDuration: packageData.duration,
      selectedPlan: packageData.plans[selectedPlan].name,
      travelDate: formData.date,
      guests: formData.guests,
      travelers: formData.travelers,
      contactInfo: {
        name: formData.contactName || `${currentUser.firstName} ${currentUser.lastName}`,
        email: formData.contactEmail || currentUser.email,
        phone: formData.contactPhone || currentUser.phone
      },
      basePrice: packageData.plans[selectedPlan].discountedPrice,
      taxes: Math.round(calculateTotal() * 0.18),
      totalPrice: calculateTotal() + Math.round(calculateTotal() * 0.18),
      paymentMethod: formData.paymentMethod,
      specialRequirements: formData.specialRequirements || "None"
    };
  
    // Save booking to localStorage
    const bookingId = saveBookingToLocalStorage(bookingData);
    
    console.log("Booking submitted:", bookingData);
    console.log("Booking ID:", bookingId);
  
    toast.success("Booking confirmed! Check your email for details.");
  
    // Redirect to my bookings page
    setTimeout(() => {
      navigate("/my-bookings");
    }, 2000);
  };



  // const handleSubmit = (e) => {
  //   e.preventDefault();

  //   if (formData.paymentMethod === "creditCard") {
  //     if (!formData.cardNumber || !formData.cardName || !formData.cardExpiry || !formData.cardCVV) {
  //       toast.error("Please fill in all payment details.");
  //       return;
  //     }
  //   }

  //   if (!formData.agreeTerms) {
  //     toast.error("Please agree to the terms and conditions.");
  //     return;
  //   }

  //   const bookingData = {
  //     packageName: packageData.name,
  //     packageLocation: packageData.location,
  //     packageDuration: packageData.duration,
  //     selectedPlan: packageData.plans[selectedPlan].name,
  //     travelDate: formData.date,
  //     guests: formData.guests,
  //     travelers: formData.travelers,
  //     contactInfo: {
  //       name: formData.contactName,
  //       email: formData.contactEmail,
  //       phone: formData.contactPhone
  //     },
  //     basePrice: packageData.plans[selectedPlan].discountedPrice,
  //     taxes: Math.round(calculateTotal() * 0.18),
  //     totalPrice: calculateTotal() + Math.round(calculateTotal() * 0.18),
  //     paymentMethod: formData.paymentMethod,
  //     specialRequirements: formData.specialRequirements || "None"
  //   };

  //   // Save booking to localStorage
  //   const bookingId = saveBookingToLocalStorage(bookingData);
    
  //   console.log("Booking submitted:", bookingData);
  //   console.log("Booking ID:", bookingId);

  //   toast.success("Booking confirmed! Check your email for details.");

  //   setTimeout(() => {
  //     navigate("/profile");
  //   }, 2000);
  // };

  if (!packageData) {
    return (
      <div className="flex justify-center items-center h-screen bg-blue-50">
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, repeat: Infinity, repeatType: "reverse" }}
        >
          <div className="flex items-center justify-center space-x-2">
            <div className="w-4 h-4 rounded-full bg-blue-600 animate-bounce"></div>
            <div className="w-4 h-4 rounded-full bg-blue-500 animate-bounce delay-100"></div>
            <div className="w-4 h-4 rounded-full bg-blue-400 animate-bounce delay-200"></div>
          </div>
          <p className="mt-4 text-blue-800 font-medium">Loading your adventure...</p>
        </motion.div>
      </div>
    );
  }

  const formatDate = (date) => {
    const options = { year: "numeric", month: "long", day: "numeric" };
    return new Date(date).toLocaleDateString(undefined, options);
  };

  const calculateTotal = () => {
    const basePrice = packageData.plans[selectedPlan].discountedPrice;
    return basePrice * formData.guests;
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { staggerChildren: 0.1 }
    }
  };
  
  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { 
      y: 0, 
      opacity: 1,
      transition: { type: "spring", stiffness: 100 }
    }
  };

  return (
    <>
      <div className="min-h-screen bg-blue-50">
        {/* <StickyMarquee /> */}
        
        {/* Header */}
        <header className="text-center pt-8 pb-4 px-6 bg-gradient-to-r from-blue-600 to-blue-400 text-white">
          <motion.h1
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
            className="text-4xl font-bold"
          >
            Book Your Dream Tour
          </motion.h1>
          <motion.p 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.3, duration: 0.6 }}
            className="mt-2 text-blue-100 max-w-2xl mx-auto"
          >
            Complete the booking process for {packageData.name} and prepare for an unforgettable journey.
          </motion.p>
        </header>

        {/* Progress Steps */}
        <div className="container mx-auto px-6 py-8">
          <div className="flex justify-center mb-12">
            <div className="relative w-full max-w-3xl flex justify-between">
              {/* Progress Bar */}
              <div className="absolute top-1/2 w-full h-1 bg-gray-200 -translate-y-1/2 z-0"></div>
              <div 
                className="absolute top-1/2 h-1 bg-blue-500 -translate-y-1/2 z-0 transition-all duration-500"
                style={{ width: `${(step - 1) * 50}%` }}
              ></div>
              
              {/* Steps */}
              {["Tour Details", "Traveler Information", "Payment & Confirmation"].map((name, index) => (
                <motion.div
                  key={name}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.2 }}
                  className="relative z-10 flex flex-col items-center"
                >
                  <div
                    className={`w-12 h-12 rounded-full flex items-center justify-center border-2 shadow-md transition-all duration-300 ${
                      step > index + 1
                        ? "border-green-500 bg-green-500 text-white"
                        : step === index + 1
                        ? "border-blue-600 bg-blue-600 text-white"
                        : "border-gray-300 bg-white text-gray-400"
                    }`}
                  >
                    {step > index + 1 ? (
                      <CheckCircle size={20} />
                    ) : (
                      <span className="font-semibold">{index + 1}</span>
                    )}
                  </div>
                  <span className={`mt-2 font-medium text-sm ${
                    step > index + 1
                      ? "text-green-600"
                      : step === index + 1
                      ? "text-blue-600"
                      : "text-gray-400"
                  }`}>{name}</span>
                </motion.div>
              ))}
            </div>
          </div>

          {/* Main Content with Two-Column Layout */}
          <div className="flex flex-col lg:flex-row gap-8 max-w-7xl mx-auto">
            {/* Left Column - Booking Forms */}
            <div className="w-full lg:w-2/3">
              <AnimatePresence mode="wait">
                {step === 1 && (
                  <motion.div
                    key="step1"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.4 }}
                    className="bg-white p-6 rounded-xl shadow-lg"
                  >
                    <h2 className="text-xl font-semibold mb-6 flex items-center text-blue-700 border-b pb-4">
                      <Calendar className="mr-2" size={24} /> Select Your Experience
                    </h2>

                    {/* Date & Guests */}
                    <div className="mb-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                          <Calendar className="mr-2 text-blue-600" size={18} /> Select Travel Date
                        </label>
                        <div className="relative">
                          <input
                            type="date"
                            name="date"
                            value={formData.date}
                            onChange={handleInputChange}
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                          />
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                          <Users className="mr-2 text-blue-600" size={18} /> Number of Travelers
                        </label>
                        <div className="flex items-center">
                          <button
                            onClick={() => {
                              if (formData.guests > 1) {
                                setFormData({ ...formData, guests: formData.guests - 1 });
                              }
                            }}
                            className="px-4 py-3 border border-gray-300 rounded-l-lg hover:bg-gray-100 focus:outline-none transition-colors text-blue-700"
                          >
                            <Minus size={16} />
                          </button>
                          <span className="px-6 py-3 border-t border-b border-gray-300 font-medium">{formData.guests}</span>
                          <button
                            onClick={() => setFormData({ ...formData, guests: formData.guests + 1 })}
                            className="px-4 py-3 border border-gray-300 rounded-r-lg hover:bg-gray-100 focus:outline-none transition-colors text-blue-700"
                          >
                            <Plus size={16} />
                          </button>
                        </div>
                      </div>
                    </div>

                    {/* Select Plan */}
                    <div className="mb-8">
                      <h3 className="text-lg font-medium mb-4 flex items-center text-blue-700">
                        <CheckCircle className="mr-2" size={20} /> Select Your Plan
                      </h3>
                      <div className="grid grid-cols-1 gap-4">
                        {packageData.plans.map((plan, index) => (
                          <motion.div
                            key={plan.name}
                            whileHover={{ scale: 1.01 }}
                            whileTap={{ scale: 0.99 }}
                            onClick={() => setSelectedPlan(index)}
                            className={`p-6 rounded-lg cursor-pointer transition-all ${
                              selectedPlan === index 
                                ? "border-2 border-blue-500 bg-blue-50 shadow-md" 
                                : "border border-gray-200 hover:border-blue-300 hover:bg-blue-50/30 shadow-sm"
                            }`}
                          >
                            <div className="flex justify-between items-center">
                              <div>
                                <h4 className="text-lg font-semibold text-blue-800">{plan.name}</h4>
                                <p className="text-gray-600 mt-1">{plan.description}</p>
                              </div>
                              <div className="text-right">
                                <div className="line-through text-gray-500">₹{plan.actualPrice.toLocaleString()}</div>
                                <div className="text-blue-600 font-bold text-xl">₹{plan.discountedPrice.toLocaleString()}</div>
                                <div className="text-green-600 text-sm">
                                  {Math.round(((plan.actualPrice - plan.discountedPrice) / plan.actualPrice) * 100)}% OFF
                                </div>
                              </div>
                            </div>
                          </motion.div>
                        ))}
                      </div>
                    </div>

                    {/* Next Button */}
                    <motion.button
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={nextStep}
                      className="w-full bg-blue-600 text-white py-4 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center font-medium shadow-md"
                    >
                      Next: Traveler Information <ChevronRight className="ml-2" />
                    </motion.button>
                  </motion.div>
                )}

                {step === 2 && (
                  <motion.div
                    key="step2"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.4 }}
                    className="bg-white p-6 rounded-xl shadow-lg"
                  >
                    <h2 className="text-xl font-semibold mb-6 flex items-center text-blue-700 border-b pb-4">
                      <User className="mr-2" size={24} /> Traveler Information
                    </h2>

                    {/* Contact Details */}
                    <motion.div 
                      variants={containerVariants}
                      initial="hidden"
                      animate="visible"
                      className="mb-8"
                    >
                      <h3 className="text-lg font-medium mb-4 flex items-center text-blue-700">
                        <Mail className="mr-2" size={20} /> Contact Details
                      </h3>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <motion.div variants={itemVariants}>
                          <input
                            type="text"
                            name="contactName"
                            value={formData.contactName}
                            onChange={handleInputChange}
                            placeholder="Full Name"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                          />
                        </motion.div>
                        <motion.div variants={itemVariants}>
                          <input
                            type="email"
                            name="contactEmail"
                            value={formData.contactEmail}
                            onChange={handleInputChange}
                            placeholder="Email Address"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                          />
                        </motion.div>
                        <motion.div variants={itemVariants} className="md:col-span-2">
                          <input
                            type="tel"
                            name="contactPhone"
                            value={formData.contactPhone}
                            onChange={handleInputChange}
                            placeholder="Phone Number"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                          />
                        </motion.div>
                      </div>
                    </motion.div>

                    {/* Traveler Details */}
                    <div className="mb-8">
                      <h3 className="text-lg font-medium mb-4 flex items-center text-blue-700">
                        <Users className="mr-2" size={20} /> Traveler Details
                      </h3>
                      {formData.travelers.map((traveler, index) => (
                        <motion.div 
                          key={index}
                          initial={{ opacity: 0, y: 20 }}
                          animate={{ opacity: 1, y: 0 }}
                          transition={{ delay: index * 0.1 }}
                          className="relative mb-6 p-6 border rounded-lg bg-blue-50 shadow-sm"
                        >
                          {formData.travelers.length > 1 && (
                            <button
                              onClick={() => removeTraveler(index)}
                              className="absolute top-3 right-3 text-red-500 hover:text-red-700 transition-colors bg-white p-2 rounded-full shadow-sm"
                            >
                              <Trash2 size={16} />
                            </button>
                          )}
                          <h4 className="text-lg font-medium mb-4 text-blue-700 flex items-center">
                            <User size={18} className="mr-2" /> Traveler {index + 1}
                          </h4>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <input
                              type="text"
                              value={traveler.name}
                              onChange={(e) => handleTravelerChange(index, "name", e.target.value)}
                              placeholder="Full Name"
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                            />
                            <input
                              type="number"
                              value={traveler.age}
                              onChange={(e) => handleTravelerChange(index, "age", e.target.value)}
                              placeholder="Age"
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                            />
                            <select
                              value={traveler.gender}
                              onChange={(e) => handleTravelerChange(index, "gender", e.target.value)}
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                            >
                              <option value="male">Male</option>
                              <option value="female">Female</option>
                              <option value="other">Other</option>
                            </select>
                            <select
                              value={traveler.idType}
                              onChange={(e) => handleTravelerChange(index, "idType", e.target.value)}
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                            >
                              <option value="passport">Passport</option>
                              <option value="nationalID">National ID</option>
                              <option value="drivingLicense">Driving License</option>
                            </select>
                            <input
                              type="text"
                              value={traveler.idNumber}
                              onChange={(e) => handleTravelerChange(index, "idNumber", e.target.value)}
                              placeholder="ID Number"
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white shadow-sm"
                            />
                          </div>
                        </motion.div>
                      ))}
                      <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={addTraveler}
                        className="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center shadow-sm"
                      >
                        Add Another Traveler <Plus className="ml-2" />
                      </motion.button>
                    </div>

                    {/* Special Requirements */}
                    <div className="mb-8">
                      <label className="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                        <Info className="mr-2 text-blue-600" size={18} /> Special Requirements (optional)
                      </label>
                      <textarea
                        name="specialRequirements"
                        value={formData.specialRequirements}
                        onChange={handleInputChange}
                        rows={3}
                        placeholder="Any dietary restrictions, accessibility needs, or special requests?"
                        className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                      />
                    </div>

                    {/* Navigation Buttons */}
                    <div className="flex flex-col md:flex-row justify-between gap-4">
                      <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={prevStep}
                        className="bg-gray-200 text-gray-700 py-3 px-6 rounded-lg hover:bg-gray-300 transition-colors flex items-center justify-center md:justify-start shadow-sm"
                      >
                        <ChevronLeft className="mr-2" /> Previous: Tour Details
                      </motion.button>
                      <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={nextStep}
                        className="bg-blue-600 text-white py-3 px-6 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center md:justify-start shadow-md"
                      >
                        Next: Payment <ChevronRight className="ml-2" />
                      </motion.button>
                    </div>
                  </motion.div>
                )}

                {step === 3 && (
                  <motion.div
                    key="step3"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: 20 }}
                    transition={{ duration: 0.4 }}
                    className="bg-white p-6 rounded-xl shadow-lg"
                  >
                    <h2 className="text-xl font-semibold mb-6 flex items-center text-blue-700 border-b pb-4">
                      <CreditCard className="mr-2" size={24} /> Payment & Confirmation
                    </h2>

                    {/* Payment Method */}
                    <div className="mb-8">
                      <h3 className="text-lg font-medium mb-4 flex items-center text-blue-700">
                        <CreditCard className="mr-2" size={20} /> Payment Method
                      </h3>
                      <div className="flex items-center space-x-4">
                        <button
                          onClick={() => setFormData({ ...formData, paymentMethod: "creditCard" })}
                          className={`flex-1 px-4 py-4 rounded-lg flex items-center justify-center gap-3 transition-all duration-300 ${
                            formData.paymentMethod === "creditCard"
                              ? "bg-blue-600 text-white shadow-md"
                              : "bg-gray-100 text-gray-700 hover:bg-gray-200 shadow-sm"
                          }`}
                        >
                          <CreditCard size={20} />
                          <span className="font-medium">Credit Card</span>
                        </button>
                        {/* <button
                          onClick={() => setFormData({ ...formData, paymentMethod: "paypal" })}
                          className={`flex-1 px-4 py-4 rounded-lg flex items-center justify-center gap-3 transition-all duration-300 ${
                            formData.paymentMethod === "paypal" 
                              ? "bg-blue-600 text-white shadow-md" 
                              : "bg-gray-100 text-gray-700 hover:bg-gray-200 shadow-sm"
                          }`}
                        >
                          <div className="text-xl font-bold">P</div>
                          <span className="font-medium">PayPal</span>
                        </button> */}
                      </div>
                    </div>

                    {/* Payment Details */}
                    {formData.paymentMethod === "creditCard" && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: "auto" }}
                        transition={{ duration: 0.3 }}
                        className="mb-8 overflow-hidden"
                      >
                        <h3 className="text-lg font-medium mb-4 flex items-center text-blue-700">
                          <Lock className="mr-2" size={20} /> Payment Details
                        </h3>
                        <div className="bg-blue-50 p-4 mb-4 rounded-lg border border-blue-200 flex items-center">
                          <Shield className="text-blue-700 mr-2" size={20} />
                          <span className="text-blue-800 text-sm">Your payment information is secure and encrypted</span>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div className="md:col-span-2">
                            <input
                              type="text"
                              name="cardNumber"
                              value={formData.cardNumber}
                              onChange={handleInputChange}
                              placeholder="Card Number"
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                            />
                          </div>
                          <input
                            type="text"
                            name="cardName"
                            value={formData.cardName}
                            onChange={handleInputChange}
                            placeholder="Cardholder Name"
                            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                          />
                          <div className="flex gap-4">
                            <input
                              type="text"
                              name="cardExpiry"
                              value={formData.cardExpiry}
                              onChange={handleInputChange}
                              placeholder="MM/YY"
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                            />
                            <input
                              type="text"
                              name="cardCVV"
                              value={formData.cardCVV}
                              onChange={handleInputChange}
                              placeholder="CVV"
                              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent shadow-sm"
                            />
                          </div>
                        </div>
                      </motion.div>
                    )}

                    {/* Order Summary */}
                    <div className="mb-8">
                      <h3 className="text-lg font-medium mb-4 flex items-center text-blue-700">
                        <FileText className="mr-2" size={20} /> Order Summary
                      </h3>
                      <div className="bg-gray-50 p-6 rounded-lg border border-gray-200">
                        <div className="flex justify-between items-center pb-4 border-b border-gray-200">
                          <div className="font-medium text-gray-800">{packageData.name}</div>
                          <div className="text-blue-600 font-semibold">
                            {packageData.plans[selectedPlan].name}
                          </div>
                        </div>
                        <div className="py-4 border-b border-gray-200">
                          <div className="flex justify-between mb-2">
                            <div className="text-gray-600 flex items-center">
                              <Calendar size={16} className="mr-2" /> Travel Date
                            </div>
                            <div className="font-medium">{formData.date ? formatDate(formData.date) : "Not selected"}</div>
                          </div>
                          <div className="flex justify-between mb-2">
                            <div className="text-gray-600 flex items-center">
                              <Users size={16} className="mr-2" /> Travelers
                            </div>
                            <div className="font-medium">{formData.guests}</div>
                          </div>
                          <div className="flex justify-between">
                            <div className="text-gray-600 flex items-center">
                              <MapPin size={16} className="mr-2" /> Destination
                            </div>
                            <div className="font-medium">{packageData.location}</div>
                          </div>
                        </div>
                        <div className="py-4 border-b border-gray-200">
                          <div className="flex justify-between mb-2">
                            <div className="text-gray-600">Base Price ({formData.guests} {formData.guests > 1 ? "travelers" : "traveler"})</div>
                            <div className="font-medium">₹{calculateTotal().toLocaleString()}</div>
                          </div>
                          <div className="flex justify-between mb-2">
                            <div className="text-gray-600">Taxes & Fees (18%)</div>
                            <div className="font-medium">₹{Math.round(calculateTotal() * 0.18).toLocaleString()}</div>
                          </div>
                        </div>
                        <div className="pt-4">
                          <div className="flex justify-between items-center">
                            <div className="font-semibold text-lg">Total Amount</div>
                            <div className="font-bold text-xl text-blue-700">₹{(calculateTotal() + Math.round(calculateTotal() * 0.18)).toLocaleString()}</div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Terms and Conditions */}
                    <div className="mb-8">
                      <div className="flex items-start">
                        <input
                          type="checkbox"
                          id="agreeTerms"
                          name="agreeTerms"
                          checked={formData.agreeTerms}
                          onChange={handleInputChange}
                          className="mt-1 mr-3"
                        />
                        <label htmlFor="agreeTerms" className="text-gray-700 text-sm">
                          I agree to the <a href="#" className="text-blue-600 hover:underline">Terms & Conditions</a> and <a href="#" className="text-blue-600 hover:underline">Privacy Policy</a>. I also consent to the processing of my personal data as described in the Privacy Policy.
                        </label>
                      </div>
                    </div>

                    {/* Navigation Buttons */}
                    <div className="flex flex-col md:flex-row justify-between gap-4">
                      <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={prevStep}
                        className="bg-gray-200 text-gray-700 py-3 px-6 rounded-lg hover:bg-gray-300 transition-colors flex items-center justify-center md:justify-start shadow-sm"
                      >
                        <ChevronLeft className="mr-2" /> Previous: Traveler Details
                      </motion.button>
                      <motion.button
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                        onClick={handleSubmit}
                        className="bg-green-600 text-white py-3 px-6 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center md:justify-start shadow-md"
                      >
                        Complete Booking <CheckCircle className="ml-2" />
                      </motion.button>
                    </div>
                  </motion.div>
                )}
              </AnimatePresence>
            </div>

            {/* Right Column - Package Details */}
            <div className="w-full lg:w-1/3 space-y-6">
              {/* Package Details Card */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2, duration: 0.6 }}
                className="bg-white p-6 rounded-xl shadow-lg"
              >
                <div className="relative h-48 rounded-lg overflow-hidden mb-4">
                  <img 
                    src={packageData.images[0]} 
                    alt={packageData.name} 
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-4">
                    <h3 className="text-xl font-bold text-white">{packageData.name}</h3>
                    <div className="flex items-center text-yellow-400">
                      {[...Array(5)].map((_, i) => (
                        <Star key={i} size={16} fill={i < packageData.rating ? "currentColor" : "none"} />
                      ))}
                      <span className="text-white ml-2 text-sm">({packageData.reviews} reviews)</span>
                    </div>
                  </div>
                </div>

                <div className="space-y-4">
                  <div className="flex items-start">
                    <MapPin className="text-blue-600 mt-1 mr-2 flex-shrink-0" size={18} />
                    <div>
                      <h4 className="font-medium text-gray-800">Location</h4>
                      <p className="text-gray-600">{packageData.location}</p>
                    </div>
                  </div>

                  <div className="flex items-start">
                    <Clock className="text-blue-600 mt-1 mr-2 flex-shrink-0" size={18} />
                    <div>
                      <h4 className="font-medium text-gray-800">Duration</h4>
                      <p className="text-gray-600">{packageData.duration}</p>
                    </div>
                  </div>

                  <div className="flex items-start">
                    <CheckCircle className="text-blue-600 mt-1 mr-2 flex-shrink-0" size={18} />
                    <div>
                      <h4 className="font-medium text-gray-800">Highlights</h4>
                      <ul className="text-gray-600 mt-1 space-y-1">
                        {/* {packageData.highlights.slice(0, 3).map((highlight, index) => (
                          <li key={index} className="flex items-start">
                            <div className="w-1 h-1 bg-gray-500 rounded-full mt-2 mr-2"></div>
                            <span>{highlight}</span>
                          </li>
                        ))} */}
                      </ul>
                    </div>
                  </div>
                </div>
              </motion.div>

              {/* Why Book With Us */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4, duration: 0.6 }}
                className="bg-white p-6 rounded-xl shadow-lg"
              >
                <h3 className="text-lg font-semibold mb-4 flex items-center text-blue-700">
                  <Award className="mr-2" size={20} /> Why Book With Us
                </h3>
                <ul className="space-y-3">
                  <li className="flex items-center">
                    <div className="bg-green-100 p-2 rounded-full mr-3">
                      <Shield className="text-green-600" size={16} />
                    </div>
                    <span className="text-gray-700">Secure Payment Gateway</span>
                  </li>
                  <li className="flex items-center">
                    <div className="bg-blue-100 p-2 rounded-full mr-3">
                      <Heart className="text-blue-600" size={16} />
                    </div>
                    <span className="text-gray-700">Memorable Experiences</span>
                  </li>
                  <li className="flex items-center">
                    <div className="bg-yellow-100 p-2 rounded-full mr-3">
                      <DollarSign className="text-yellow-600" size={16} />
                    </div>
                    <span className="text-gray-700">Best Price Guarantee</span>
                  </li>
                  <li className="flex items-center">
                    <div className="bg-purple-100 p-2 rounded-full mr-3">
                      <Phone className="text-purple-600" size={16} />
                    </div>
                    <span className="text-gray-700">24/7 Customer Support</span>
                  </li>
                </ul>
              </motion.div>
            </div>
          </div>
        </div>
      </div>

      <ToastContainer position="bottom-right" />
    </>
  );
};

export default BookingPage;